/**
 * @fileoverview Handler pentru mesajele de automatizare.
 * 
 * ProceseazƒÉ mesajele de tip AUTOMATION_ACTION »ôi afi»ôeazƒÉ notificƒÉri.
 */

import { useChatStore } from "../../store/chatStore";

/**
 * ProceseazƒÉ o notificare/ac»õiune de automatizare
 * 
 * @param {Object} payload - Payload-ul mesajului
 * @returns {void}
 */
export const handleNotification = (payload) => {
  console.group("ü§ñ [AUTOMATION_HANDLER] Processing notification");
  console.log("Payload:", payload);
  
  if (!payload) {
    console.error("‚ùå [AUTOMATION_HANDLER] Invalid payload");
    console.groupEnd();
    return;
  }

  const { addMessage } = useChatStore.getState();
  
  // VerificƒÉm dacƒÉ avem un mesaj de automatizare complet
  if (payload.notification) {
    addMessage({
      type: "automation",
      notification: {
        type: payload.notification.type,
        title: payload.notification.title || "Notificare automatizare",
        message: payload.notification.message,
        data: payload.notification.data
      },
      timestamp: new Date().toISOString()
    });
    
    console.log("‚úÖ [AUTOMATION_HANDLER] Automation message added to chat");
  }
  // Caz pentru mesaje simple
  else if (payload.message) {
    addMessage({
      text: payload.message,
      type: "notification",
      timestamp: new Date().toISOString()
    });
    
    console.log("‚úÖ [AUTOMATION_HANDLER] Simple notification added to chat");
  }
  
  // ProcesƒÉm ac»õiuni specifice
  if (payload.action) {
    console.log("Action:", payload.action);
    
    // DacƒÉ action are format Intent, actualizƒÉm starea
    if (payload.action.startsWith('show_')) {
      const { setLatestIntent, setDisplayComponent } = useChatStore.getState();
      
      // SetƒÉm intent-ul
      setLatestIntent(payload.action);
      
      // SetƒÉm componenta de afi»ôare
      setDisplayComponent(payload.action.replace('show_', ''));
    }
  }
  
  console.groupEnd();
}; 