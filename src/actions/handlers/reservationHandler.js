/**
 * @fileoverview Handler pentru mesajele de rezervare.
 * 
 * ProceseazƒÉ mesajele de tip RESERVATION_ACTION »ôi actualizeazƒÉ starea rezervƒÉrilor.
 */

import { RESERVATION_ACTIONS } from '../types';

/**
 * ProceseazƒÉ ac»õiuni legate de rezervƒÉri
 * 
 * @param {Object} payload - Payload-ul mesajului
 * @param {Object} storeActions - Func»õii pentru actualizarea stƒÉrii
 * @param {Function} storeActions.setReservations - Func»õie pentru setarea rezervƒÉrilor
 * @returns {void}
 */
export const handleReservationsUpdate = (payload, { setReservations }) => {
  console.group("üè® [RESERVATION_HANDLER] Processing reservation action");
  console.log("Payload:", payload);
  
  if (!payload || (!payload.reservations && !Array.isArray(payload))) {
    console.error("‚ùå [RESERVATION_HANDLER] Invalid payload");
    console.groupEnd();
    return;
  }
  
  let action = payload.action || RESERVATION_ACTIONS.SYNC;
  let reservations = Array.isArray(payload) ? payload : payload.reservations;
  
  console.log("Action:", action);
  console.log("Reservations count:", reservations ? reservations.length : 0);
  
  switch (action) {
    case RESERVATION_ACTIONS.INIT:
    case RESERVATION_ACTIONS.SYNC:
      // Ini»õializare/sincronizare - √Ænlocuim toate rezervƒÉrile
      if (Array.isArray(reservations)) {
        setReservations(reservations);
        console.log("‚úÖ [RESERVATION_HANDLER] Reservations synchronized");
      }
      break;
      
    case RESERVATION_ACTIONS.CREATE:
      // AdƒÉugƒÉm o rezervare nouƒÉ
      if (reservations && reservations.length > 0) {
        const { getReservations } = require('../../store/calendarStore').useCalendarStore.getState();
        const currentReservations = getReservations();
        
        const newReservations = [...currentReservations, ...reservations];
        setReservations(newReservations);
        console.log("‚úÖ [RESERVATION_HANDLER] Reservation added");
      }
      break;
      
    case RESERVATION_ACTIONS.UPDATE:
      // ActualizƒÉm una sau mai multe rezervƒÉri
      if (reservations && reservations.length > 0) {
        const { getReservations } = require('../../store/calendarStore').useCalendarStore.getState();
        const currentReservations = getReservations();
        
        // CreƒÉm un map cu rezervƒÉrile curente pentru procesare eficientƒÉ
        const reservationsMap = new Map();
        currentReservations.forEach(res => {
          reservationsMap.set(res.id, res);
        });
        
        // ActualizƒÉm rezervƒÉrile
        reservations.forEach(newRes => {
          if (newRes.id && reservationsMap.has(newRes.id)) {
            reservationsMap.set(newRes.id, { ...reservationsMap.get(newRes.id), ...newRes });
          }
        });
        
        // Convertim √Ænapoi la array
        const updatedReservations = Array.from(reservationsMap.values());
        setReservations(updatedReservations);
        console.log("‚úÖ [RESERVATION_HANDLER] Reservations updated");
      }
      break;
      
    case RESERVATION_ACTIONS.DELETE:
      // »òtergem una sau mai multe rezervƒÉri
      if (reservations && reservations.length > 0) {
        const { getReservations } = require('../../store/calendarStore').useCalendarStore.getState();
        const currentReservations = getReservations();
        
        // CreƒÉm un set cu ID-urile de »ôters pentru procesare eficientƒÉ
        const idsToDelete = new Set();
        reservations.forEach(res => {
          if (res.id) idsToDelete.add(res.id);
        });
        
        // FiltrƒÉm rezervƒÉrile care nu trebuie »ôterse
        const updatedReservations = currentReservations.filter(res => !idsToDelete.has(res.id));
        setReservations(updatedReservations);
        console.log("‚úÖ [RESERVATION_HANDLER] Reservations deleted");
      }
      break;
      
    default:
      console.warn("‚ö†Ô∏è [RESERVATION_HANDLER] Unknown action:", action);
      break;
  }
  
  console.groupEnd();
}; 