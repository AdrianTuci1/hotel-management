/**
 * @fileoverview Interfa»õƒÉ pentru WebSocket Worker
 * 
 * Acest modul oferƒÉ o interfa»õƒÉ simplificatƒÉ pentru comunicarea cu WebSocket Worker.
 */

import { OUTGOING_MESSAGE_TYPES } from '../types';

// StocƒÉm instan»õa worker-ului pentru reutilizare
let socketWorker = null;

/**
 * Ini»õializeazƒÉ »ôi returneazƒÉ instan»õa WebSocket Worker
 * 
 * @returns {Worker|null} Instan»õa worker-ului sau null √Æn caz de eroare
 */
export const initializeWorker = () => {
  try {
    // VerificƒÉm dacƒÉ worker-ul existƒÉ deja
    if (socketWorker !== null) {
      return socketWorker;
    }
    
    // CreƒÉm un nou worker
    console.log("üîå [SOCKET] Creating new WebSocket worker");
    socketWorker = new Worker(new URL('../../workers/WebSocketWorker.js', import.meta.url), { type: 'module' });
    
    // Ini»õializƒÉm conexiunea
    socketWorker.postMessage({ type: "init" });
    
    return socketWorker;
  } catch (error) {
    console.error("‚ùå [SOCKET] Error initializing WebSocket worker:", error);
    return null;
  }
};

/**
 * Ob»õine instan»õa curentƒÉ a worker-ului sau ini»õializeazƒÉ una nouƒÉ
 * 
 * @returns {Worker|null} Instan»õa worker-ului sau null √Æn caz de eroare
 */
export const getWorker = () => {
  if (socketWorker === null) {
    return initializeWorker();
  }
  return socketWorker;
};

/**
 * Trimite un mesaj cƒÉtre server prin WebSocket Worker
 * 
 * @param {string|Object} message - Mesajul de trimis
 * @returns {boolean} true dacƒÉ mesajul a fost trimis, false √Æn caz contrar
 */
export const sendMessage = (message) => {
  const worker = getWorker();
  
  if (!worker) {
    console.error("‚ùå [SOCKET] Worker not available");
    return false;
  }
  
  try {
    // FormatƒÉm mesajul conform protocolului
    let formattedMessage;
    
    if (typeof message === 'string') {
      // √éncercƒÉm sƒÉ parsƒÉm ca JSON
      try {
        formattedMessage = JSON.parse(message);
      } catch (e) {
        // DacƒÉ nu e JSON, √Æl √ÆmpachetƒÉm √Æn formatul standard
        formattedMessage = {
          type: OUTGOING_MESSAGE_TYPES.CHAT_MESSAGE,
          content: message
        };
      }
    } else {
      // E deja un obiect
      formattedMessage = message;
    }
    
    // Trimitem mesajul cƒÉtre worker
    worker.postMessage({
      type: "send_message",
      payload: formattedMessage
    });
    
    return true;
  } catch (error) {
    console.error("‚ùå [SOCKET] Error sending message:", error);
    return false;
  }
};

/**
 * Trimite o ac»õiune de automatizare cƒÉtre server
 * 
 * @param {string} action - Ac»õiunea de automatizare
 * @returns {boolean} true dacƒÉ ac»õiunea a fost trimisƒÉ, false √Æn caz contrar
 */
export const sendAutomationAction = (action) => {
  const worker = getWorker();
  
  if (!worker) {
    console.error("‚ùå [SOCKET] Worker not available for automation action");
    return false;
  }
  
  worker.postMessage({
    type: "automation_action",
    payload: action
  });
  
  return true;
};

/**
 * Trimite o ac»õiune de rezervare cƒÉtre server
 * 
 * @param {Object} actionData - Date pentru ac»õiunea de rezervare
 * @param {string} actionData.action - Tipul ac»õiunii (create, update, delete)
 * @param {Object} [actionData.data] - Date asociate ac»õiunii
 * @returns {boolean} true dacƒÉ ac»õiunea a fost trimisƒÉ, false √Æn caz contrar
 */
export const sendReservationAction = (actionData) => {
  const worker = getWorker();
  
  if (!worker) {
    console.error("‚ùå [SOCKET] Worker not available for reservation action");
    return false;
  }
  
  if (!actionData.action) {
    console.error("‚ùå [SOCKET] Missing action field in reservation action");
    return false;
  }
  
  worker.postMessage({
    type: "reservation_action",
    payload: actionData
  });
  
  return true;
}; 